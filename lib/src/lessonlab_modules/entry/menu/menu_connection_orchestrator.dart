// import 'package:lessonlab/messages/entry/upload/uploaded_content.pb.dart'
//     // ignore: library_prefixes
//     as RinfInterface;
// import 'dart:developer' as developer;
// import 'package:rinf/rinf.dart';

import 'package:lessonlab/src/global_models/lesson_model.dart';
import 'package:lessonlab/src/global_models/quiz_model.dart';
import 'package:lessonlab/src/lessonlab_modules/entry/menu/menu_model.dart';

import 'dart:developer' as developer;

import 'package:lessonlab/messages/entry/menu/menu.pb.dart'
    // ignore: library_prefixes
    as RinfInterface;
import 'package:rinf/rinf.dart';

class MenuConnectionOrchestrator {
  void sendData() async {}

  Future<MenuModel> getData() async {
    final menuModel = MenuModel();

    menuModel.lessons = getLessons();
    menuModel.quizzes = Future.value([]);
    // menuModel.lessons.add();
    return menuModel;
  }

  Future<List<LessonModel>> getLessons() async {
    final requestMessage = RinfInterface.ReadRequest(req: true);
    final rustRequest = RustRequest(
      resource: RinfInterface.ID,
      operation: RustOperation.Read,
      message: requestMessage.writeToBuffer(),
      // blob: NO BLOB
    );
    final rustResponse = await requestToRust(rustRequest);
    final responseMessage = RinfInterface.ReadResponse.fromBuffer(
      rustResponse.message!,
    );
    var content = responseMessage.menuModel;
    // get autogenerated content.lessons and convert it into List<LessonModel>

    final List<LessonModel> lessonModels = content.lessons
        .map((autogeneratedLesson) =>
            LessonModel.fromAutogenerated(autogeneratedLesson))
        .toList();

    return lessonModels;
  }

  Future<List<QuizModel>> getQuizzes() async {
    // final requestMessage = RinfInterface.ReadRequest(req: true);
    // final rustRequest = RustRequest(
    //   resource: RinfInterface.ID,
    //   operation: RustOperation.Read,
    //   message: requestMessage.writeToBuffer(),
    //   // blob: NO BLOB
    // );
    // final rustResponse = await requestToRust(rustRequest);
    // final responseMessage = RinfInterface.ReadResponse.fromBuffer(
    //   rustResponse.message!,
    // );
    // var content = responseMessage.menuModel;
    // // get autogenerated content.lessons and convert it into List<LessonModel>

    // final List<QuizModel> quizModels = content.quizzes
    //     .map((autogeneratedLesson) =>
    //         QuizModel.fromAutogenerated(autogeneratedLesson))
    //     .toList();

    // return quizModels;
    throw UnimplementedError();
  }
}
