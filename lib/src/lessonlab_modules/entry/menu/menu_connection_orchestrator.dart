// import 'package:lessonlab/messages/entry/upload/uploaded_content.pb.dart'

import 'package:lessonlab/src/global_models/lesson_model.dart';
import 'package:lessonlab/src/global_models/quiz_model.dart';
import 'package:lessonlab/src/lessonlab_modules/entry/menu/menu_model.dart';

// import 'dart:developer' as developer;

import 'package:lessonlab/messages/entry/menu/menu.pb.dart'
    // ignore: library_prefixes
    as RinfInterface;
import 'package:rinf/rinf.dart';

class MenuConnectionOrchestrator {
  void sendData() async {}

  Future<MenuModel> getData() async {
    final menuModel = getMenuModel();

    // menuModel.lessons = getLessons();
    // menuModel.quizzes = Future.value([]);
    // menuModel.lessons.add();
    // final menuModel = getMenuModel();

    return menuModel;
  }

  Future<MenuModel> getMenuModel() async {
    final requestMessage = RinfInterface.ReadRequest(req: true);
    final rustRequest = RustRequest(
      resource: RinfInterface.ID,
      operation: RustOperation.Read,
      message: requestMessage.writeToBuffer(),
      // blob: NO BLOB
    );
    final rustResponse = await requestToRust(rustRequest);
    final responseMessage = RinfInterface.ReadResponse.fromBuffer(
      rustResponse.message!,
    );
    var content = responseMessage.menuModel;
    // get autogenerated content.lessons and convert it into List<LessonModel>

    final List<LessonModel> lessonModels = content.lessons
        .map((autogeneratedLesson) =>
            LessonModel.fromAutogenerated(autogeneratedLesson))
        .toList();

    final menuModel = MenuModel();
    menuModel.lessons = Future.value(lessonModels);
    menuModel.quizzes = Future.value([]);

    return menuModel;
  }

  // void sendMenuModel(MenuModel menuModel) async {
  //   final requestMessage = RinfInterface.CreateRequest(req: true);
  //
  //   // view menu.proto
  // }

  /*
    HTTP METHODS

    GET           -> get data
    POST          -> send data
    PUT           -> update data (complete)
    PATCH         -> update data (partial)
    DELETE        -> delete data
    TRACE         -> diagnostics, debuggin
    HEAD          -> get metadata
    OPTONS        -> get supported methods
    CONNECT       -> connect server-side
    PRI           -> ?

    source:
    https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/HTTP-methods
  */
}
