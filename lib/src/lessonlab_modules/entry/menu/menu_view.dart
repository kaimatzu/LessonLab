import 'package:flutter/material.dart';
import 'package:lessonlab/messages/entry/menu/menu.pb.dart'
    as AutogeneratedMenuModel;
import 'package:lessonlab/src/global_components/lessonlab_appbar.dart';
import 'package:lessonlab/src/global_models/lesson_model.dart';
import 'package:lessonlab/src/global_models/quiz_model.dart';
import 'package:lessonlab/src/lessonlab_modules/entry/menu/components/new_material_button.dart';
import 'package:lessonlab/src/lessonlab_modules/entry/menu/components/menu_card.dart';
import 'package:lessonlab/src/lessonlab_modules/entry/menu/menu_view_model.dart';
import 'package:lessonlab/src/lessonlab_modules/entry/menu/menu_model.dart';

import 'package:provider/provider.dart';

class MenuView extends StatelessWidget {
  MenuView({
    super.key,
  });

  static const routeName = '/';

  late MenuViewModel _menuViewModel;

  @override
  Widget build(BuildContext context) {
    _menuViewModel = context.watch<MenuViewModel>();
    double cardWidth = MediaQuery.of(context).size.width * 0.25;
    double cardHeight = MediaQuery.of(context).size.height * 0.25;

    var newMaterialButton = NewMaterialButton(
      onPressed: () {
        _menuViewModel.navigateToUploadScreen(context);
      },
      icon: const Icon(Icons.add),
      text: 'New material',
    );

    var grid = FutureBuilder<List<Object>>(
        future: Future.wait([
          _menuViewModel.menuModel.lessons,
          _menuViewModel.menuModel.quizzes,
        ]),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const CircularProgressIndicator();
          } else if (snapshot.hasError) {
            return const Text('Error loading lesson content');
          } else {
            final List<Object> contents = snapshot.data!;
            final List<LessonModel> lessons = contents[0] as List<LessonModel>;
            final List<QuizModel> quizzes = contents[1] as List<QuizModel>;

            return GridView.builder(
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                crossAxisSpacing: 12.0,
                mainAxisSpacing: 24.0,
                childAspectRatio: cardWidth / cardHeight,
              ),
              itemCount: quizzes.length + lessons.length,
              // itemCount: 4,
              itemBuilder: (BuildContext context, int index) {
                return MenuCard(
                  // title: _menuViewModel.menuModel.lessons[index].title,
                  // content: _menuViewModel.menuModel.lessons[index].content,
                  title: 'Item $index',
                  content: 'Content $index',
                );
              },
            );
          }
        });

    return Scaffold(
      appBar: const LessonLabAppBar(),
      body: Padding(
        padding: const EdgeInsets.fromLTRB(180.0, 30.0, 180.0, 60.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start, // Adjust as needed
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                const Text(
                  'Dashboard',
                  style: TextStyle(
                    fontSize: 28.0,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                newMaterialButton,
              ],
            ),
            const SizedBox(height: 16.0),
            Expanded(
              child: grid,
            ),
          ],
        ),
      ),
    );
  }
}
